<?php

/**
 * @file
 * Allows users to create and organize related content in an structure.
 */

define('GUIDE_MAX_DEPTH', 2);

/**
 * Implements hook_help().
 */
function guide_help($path, $arg) {
  switch ($path) {
    case 'admin/help#guide':
      $output = '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('The guide module is used for creating structured, multi-page content, such as site resource guides, manuals, and wikis. It allows you to create content that has chapters, sections, subsections, or any similarly-tiered structure. For more information, see the online handguide entry for <a href="@guide">guide module</a>.', array('@guide' => 'http://drupal.org/documentation/modules/guide/')) . '</p>';
      $output .= '<h3>' . t('Uses') . '</h3>';
      $output .= '<dl>';
      $output .= '<dt>' . t('Adding and managing guide content') . '</dt>';
      $output .= '<dd>' . t('You can assign separate permissions for <em>creating</em>, <em>editing</em>, and <em>deleting</em> guide content, as well as <em>adding content to guides</em>, and <em>creating new guides</em>. Users with the <em>Administer guide structures</em> permission can add <em>any</em> type of content to a guide by selecting the appropriate guide structure while editing the content. They can also view a list of all guides, and edit and rearrange section titles on the <a href="@admin-guide">guide administration page</a>.', array('@admin-guide' => url('admin/localgov/content/guide'))) . '</dd>';
      $output .= '<dt>' . t('Guide navigation') . '</dt>';
      $output .= '<dd>' . t("guide pages have a default guide-specific navigation block. This navigation block contains links that lead to the previous and next pages in the guide, and to the level above the current page in the guide's structure. This block can be enabled on the <a href='@admin-block'>Blocks administration page</a>. For guide pages to show up in the guide navigation, they must be added to a guide structure.", array('@admin-block' => url('admin/structure/block'))) . '</dd>';
      $output .= '<dt>' . t('Collaboration') . '</dt>';
      $output .= '<dd>' . t('Guides can be created collaboratively, as they allow users with appropriate permissions to add pages into existing guides, and add those pages to a custom table of contents menu.') . '</dd>';
      $output .= '<dt>' . t('Printing guides') . '</dt>';
      $output .= '<dd>' . t("Users with the <em>View printer-friendly guides</em> permission can select the <em>printer-friendly version</em> link visible at the bottom of a guide page's content to generate a printer-friendly display of the page and all of its subsections.") . '</dd>';
      $output .= '</dl>';
      return $output;
    case 'admin/localgov/content/guide':
      return '<p>' . t('The guide module offers a means to organize a collection of related content pages, collectively known as a guide. When viewed, this content automatically displays links to adjacent guide pages, providing a simple navigation system for creating and reviewing structured content.') . '</p>';
    case 'node/%/structure':
      return '<p>' . t('The structure feature allows you to include pages in the <a href="@guide">guide hierarchy</a>, as well as move them within the hierarchy or to <a href="@guide-admin">reorder an entire guide</a>.', array('@guide' => url('guide'), '@guide-admin' => url('admin/localgov/content/guide'))) . '</p>';
  }
}

/**
 * Implements hook_theme().
 */
function guide_theme($existing, $type, $theme, $path) {
  return array(
    'guide_navigation_primary' => array(
      'variables' => array('guide_link' => NULL),
      'template' => 'guide-navigation-primary',
      'path' => drupal_get_path('module', 'guide') . '/templates',
    ),
    'guide_navigation_secondary' => array(
      'variables' => array('guide_link' => NULL),
      'template' => 'guide-navigation-secondary',
      'path' => drupal_get_path('module', 'guide') . '/templates',
    ),
    'guide_export_html' => array(
      'variables' => array('title' => NULL, 'contents' => NULL, 'depth' => NULL),
      'template' => 'guide-export-html',
      'path' => drupal_get_path('module', 'guide') . '/templates',
    ),
    'guide_admin_table' => array(
      'render element' => 'form',
    ),
    'guide_title_link' => array(
      'variables' => array('link' => NULL),
    ),
    'guide_all_guides_block' => array(
      'render element' => 'guide_menus',
      'template' => 'guide-all-guides-block',
      'path' => drupal_get_path('module', 'guide') . '/templates',
    ),
    'guide_node_export_html' => array(
      'variables' => array('node' => NULL, 'children' => NULL),
      'template' => 'guide-node-export-html',
      'path' => drupal_get_path('module', 'guide') . '/templates',
    ),
    'node__guide' => array(
      'render element' => 'content',
      'base hook' => 'node',
      'template' => 'node--guide',
      'path' => drupal_get_path('module', 'guide') . '/templates',
    ),
    'node__guide_section' => array(
      'render element' => 'content',
      'base hook' => 'node',
      'template' => 'node--guide_section',
      'path' => drupal_get_path('module', 'guide') . '/templates',
    ),
  );
}

/**
 * Implements hook_permission().
 */
function guide_permission() {
  return array(
    'administer guide structures' => array(
      'title' => t('Administer guide structures'),
    ),
    'create new guides' => array(
      'title' => t('Create new guides'),
    ),
    'add content to guides' => array(
      'title' => t('Add content and child pages to guides'),
    ),
    'access printer-friendly version' => array(
      'title' => t('View printer-friendly guides'),
      'description' => t('View a guide page and all of its sub-pages as a single document for ease of printing. Can be performance heavy.'),
    ),
  );
}

/**
 * Adds relevant guide links to the node's links.
 *
 * @param $node
 *   The guide page node to add links to.
 * @param $view_mode
 *   The view mode of the node.
 */
function guide_node_view_link($node, $view_mode) {
  $links = array();

  if (isset($node->guide['depth'])) {
    if ($view_mode == 'full' && node_is_page($node)) {
      $child_type = variable_get('guide_child_type', 'guide');
      if ((user_access('add content to guides') || user_access('administer guide structures')) && node_access('create', $child_type) && $node->status == 1 && $node->guide['depth'] < GUIDE_MAX_DEPTH) {
        $links['guide_add_child'] = array(
          'title' => t('Add child page'),
          'href' => 'node/add/' . str_replace('_', '-', $child_type),
          'query' => array('parent' => $node->guide['mlid']),
        );
      }

      if (user_access('access printer-friendly version')) {
        $links['guide_printer_guide'] = array(
          'title' => t('Printer-friendly version (entire guide)'),
          'href' => 'guide/export/html/' . $node->guide['gid'],
          'attributes' => array('title' => t('Show a printer-friendly version of this guide.'))
        );
      }

      if (user_access('access printer-friendly version')) {
        $links['guide_printer_page'] = array(
          'title' => t('Printer-friendly version (this page)'),
          'href' => 'guide/export/html/' . $node->nid,
          'attributes' => array('title' => t('Show a printer-friendly version of this guide page.'))
        );
      }
    }
  }

  if (!empty($links)) {
    $node->content['links']['guide'] = array(
      '#theme' => 'links__node__guide',
      '#links' => $links,
      '#attributes' => array('class' => array('links', 'inline')),
    );
  }
}

/**
 * Implements hook_menu().
 */
function guide_menu() {
  $items['admin/localgov/content/guide'] = array(
    'title' => 'Guides',
    'description' => "Manage your site's guide structures.",
    'page callback' => 'guide_admin_overview',
    'access arguments' => array('administer guide structures'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'guide.admin.inc',
    'file path' => drupal_get_path('module', 'guide') . '/includes',
  );
  $items['admin/localgov/content/guide/list'] = array(
    'title' => 'Guide List',
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );
  $items['admin/localgov/content/guide/settings'] = array(
    'title' => 'Guide Settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('guide_admin_settings'),
    'access arguments' => array('administer site configuration'),
    'type' => MENU_LOCAL_TASK,
    'weight' => 8,
    'file' => 'guide.admin.inc',
    'file path' => drupal_get_path('module', 'guide') . '/includes',
  );
  $items['admin/localgov/content/guide/%node'] = array(
    'title' => 'Re-order guide pages and change titles',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('guide_admin_edit', 4),
    'access callback' => '_guide_structure_access',
    'access arguments' => array(4),
    'type' => MENU_CALLBACK,
    'file' => 'guide.admin.inc',
    'file path' => drupal_get_path('module', 'guide') . '/includes',
  );
  $items['guide'] = array(
    'title' => 'Guides',
    'page callback' => 'guide_render',
    'access arguments' => array('access content'),
    'type' => MENU_SUGGESTED_ITEM,
    'file' => 'guide.pages.inc',
    'file path' => drupal_get_path('module', 'guide') . '/includes',
  );
  $items['guide/export/%/%'] = array(
    'page callback' => 'guide_export',
    'page arguments' => array(2, 3),
    'access arguments' => array('access printer-friendly version'),
    'type' => MENU_CALLBACK,
    'file' => 'guide.pages.inc',
    'file path' => drupal_get_path('module', 'guide') . '/includes',
  );
  $items['node/%node/guide'] = array(
    'title' => 'Guide',
    'page callback' => 'guide_structure',
    'page arguments' => array(1),
    'access callback' => '_guide_structure_access',
    'access arguments' => array(1),
    'type' => MENU_LOCAL_TASK,
    'weight' => 2,
    'file' => 'guide.pages.inc',
    'file path' => drupal_get_path('module', 'guide') . '/includes',
  );
  $items['node/%node/guide-order'] = array(
    'title' => 'Guide Order',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('guide_admin_edit', 1),
    'access callback' => '_guide_structure_access',
    'access arguments' => array(1),
    'type' => MENU_LOCAL_TASK,
    'weight' => 3,
    'file' => 'guide.admin.inc',
    'file path' => drupal_get_path('module', 'guide') . '/includes',
  );
  $items['node/%node/guide/remove'] = array(
    'title' => 'Remove from guide',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('guide_remove_form', 1),
    'access callback' => '_guide_structure_remove_access',
    'access arguments' => array(1),
    'file' => 'guide.pages.inc',
    'file path' => drupal_get_path('module', 'guide') . '/includes',
  );

  return $items;
}

/**
 * Access callback: Determines if the structure tab is accessible.
 *
 * @param $node
 *   The node whose structure tab is to be viewed.
 */
function _guide_structure_access($node) {
  if ($node->type == 'guide' || $node->type == 'guide_section') {
    return user_access('administer guide structures') && node_access('view', $node);
  }
  return FALSE;
}

/**
 * Access callback: Determines if the user can remove nodes from the structure.
 *
 * @param $node
 *   The node to remove from the structure.
 *
 * @see guide_menu()
 */
function _guide_structure_remove_access($node) {
  if ($node->type == 'guide' || $node->type == 'guide_section') {
    return _guide_node_is_removable($node) && _guide_structure_access($node);
  }
  return FALSE;
}

/**
 * Determines if a node can be removed from the guide.
 *
 * A node can be removed from a guide if it is actually in a guide and it either
 * is not a top-level page or is a top-level page with no children.
 *
 * @param $node
 *   The node to remove from the structure.
 */
function _guide_node_is_removable($node) {
  return (!empty($node->guide['gid']) && (($node->guide['gid'] != $node->nid) || !$node->guide['has_children']));
}

/**
 * Implements hook_admin_paths().
 */
function guide_admin_paths() {
  if (variable_get('node_admin_theme')) {
    $paths = array(
      'node/*/guide' => TRUE,
      'node/*/guide/remove' => TRUE,
    );
    return $paths;
  }
}

/**
 * Implements hook_entity_info_alter().
 */
function guide_entity_info_alter(&$info) {
  // Add the 'Print' view mode for nodes.
  $info['node']['view modes'] += array(
    'print' => array(
      'label' => t('Print'),
      'custom settings' => FALSE,
    ),
  );
}

/**
 * Implements hook_block_info().
 */
function guide_block_info() {
  $block = array();
  $block['navigation']['info'] = t('Guide navigation');
  $block['navigation']['cache'] = DRUPAL_CACHE_PER_PAGE | DRUPAL_CACHE_PER_ROLE;

  $block['navigation']['info'] = t('Guide navigation');
  $block['navigation']['cache'] = DRUPAL_CACHE_PER_PAGE | DRUPAL_CACHE_PER_ROLE;

  $block['navigation']['info'] = t('Guide navigation');
  $block['navigation']['cache'] = DRUPAL_CACHE_PER_PAGE | DRUPAL_CACHE_PER_ROLE;

  return $block;
}

/**
 * Implements hook_block_view().
 *
 * Displays the guide table of contents in a block when the current page is a
 * single-node view of a guide node.
 */
function guide_block_view($delta = '') {
  $block = array();
  $current_gid = 0;
  if ($node = menu_get_object()) {
    $current_gid = empty($node->guide['gid']) ? 0 : $node->guide['gid'];
  }

  if (variable_get('guide_block_mode', 'all pages') == 'all pages') {
    $block['subject'] = t('Guide navigation');
    $guide_menus = array();
    $pseudo_tree = array(0 => array('below' => FALSE));
    foreach (guide_get_guides() as $guide_id => $guide) {
      if ($guide['gid'] == $current_gid) {
        // If the current page is a node associated with a guide, the menu
        // needs to be retrieved.
        $guide_menus[$guide_id] = menu_tree_output(menu_tree_all_data($node->guide['menu_name'], $node->guide));
      }
      else {
        // Since we know we will only display a link to the top node, there
        // is no reason to run an additional menu tree query for each guide.
        $guide['in_active_trail'] = FALSE;
        // Check whether user can access the guide link.
        $guide_node = node_load($guide['nid']);
        $guide['access'] = node_access('view', $guide_node);
        $pseudo_tree[0]['link'] = $guide;
        $guide_menus[$guide_id] = menu_tree_output($pseudo_tree);
      }
    }
    $guide_menus['#theme'] = 'guide_all_guides_block';
    $block['content'] = $guide_menus;
  }
  elseif ($current_gid) {
    // Only display this block when the user is browsing a guide.
  $select = db_select('node', 'n')
    ->fields('n', array('title'))
    ->condition('n.nid', $node->guide['gid'])
    ->addTag('node_access');
    $title = $select->execute()->fetchField();
    // Only show the block if the user has view access for the top-level node.
    if ($title) {
      $tree = menu_tree_all_data($node->guide['menu_name'], $node->guide);
      // There should only be one element at the top level.
      $data = array_shift($tree);
      $block['subject'] = theme('guide_title_link', array('link' => $data['link']));
      $block['content'] = ($data['below']) ? menu_tree_output($data['below']) : '';
    }
  }

  return $block;
}

/**
 * Implements hook_block_configure().
 */
function guide_block_configure($delta = '') {
  $block = array();
  $options = array(
    'all pages' => t('Show block on all pages'),
    'guide pages' => t('Show block only on guide pages'),
  );
  $form['guide_block_mode'] = array(
    '#type' => 'radios',
    '#title' => t('Guide navigation block display'),
    '#options' => $options,
    '#default_value' => variable_get('guide_block_mode', 'all pages'),
    '#description' => t("If <em>Show block on all pages</em> is selected, the block will contain the automatically generated menus for all of the site's guides. If <em>Show block only on guide pages</em> is selected, the block will contain only the one menu corresponding to the current page's guide. In this case, if the current page is not in a guide, no block will be displayed. The <em>Page specific visibility settings</em> or other visibility settings can be used in addition to selectively display this block."),
    );

  return $form;
}

/**
 * Implements hook_block_save().
 */
function guide_block_save($delta = '', $edit = array()) {
  $block = array();
  variable_set('guide_block_mode', $edit['guide_block_mode']);
}

/**
 * Returns HTML for a link to a guide title when used as a block title.
 *
 * @param $variables
 *   An associative array containing:
 *   - link: An array containing title, href and options for the link.
 *
 * @ingroup themeable
 */
function theme_guide_title_link($variables) {
  $link = $variables['link'];

  $link['options']['attributes']['class'] = array('guide-title');

  return l($link['title'], $link['href'], $link['options']);
}

/**
 * Returns an array of all guides.
 *
 * This list may be used for generating a list of all the guides, or for building
 * the options for a form select.
 *
 * @return
 *   An array of all guides.
 */
function guide_get_guides() {
  $all_guides = &drupal_static(__FUNCTION__);

  if (!isset($all_guides)) {
    $all_guides = array();
    $nids = db_query("SELECT DISTINCT(gid) FROM {guide}")->fetchCol();

    if ($nids) {
      $query = db_select('guide', 'b', array('fetch' => PDO::FETCH_ASSOC));
      $query->join('node', 'n', 'b.nid = n.nid');
      $query->join('menu_links', 'ml', 'b.mlid = ml.mlid');
      $query->addField('n', 'type', 'type');
      $query->addField('n', 'title', 'title');
      $query->fields('b');
      $query->fields('ml');
      $query->condition('n.nid', $nids, 'IN');
      // $query->condition('n.status', 1);
      $query->orderBy('ml.weight');
      $query->orderBy('ml.link_title');
      $query->addTag('node_access');
      $result2 = $query->execute();
      foreach ($result2 as $link) {
        $link['href'] = $link['link_path'];
        $link['options'] = unserialize($link['options']);
        $all_guides[$link['gid']] = $link;
      }
    }
  }

  return $all_guides;
}

/**
 * Implements hook_form_BASE_FORM_ID_alter() for node_form().
 *
 * Adds the guide fieldset to the node form.
 *
 * @see guide_pick_guide_nojs_submit()
 */
function guide_form_node_form_alter(&$form, &$form_state, $form_id) {
  $node = $form['#node'];
  $access = user_access('administer guide structures');

  if ($node->type == 'guide' || $node->type == 'guide_section') {
    if (!$access) {
      if (user_access('add content to guides') && ((!empty($node->guide['mlid']) && !empty($node->nid)) || guide_type_is_allowed($node->type))) {
        // Already in the guide hierarchy, or this node type is allowed.
        $access = TRUE;
      }
    }

    if ($access) {
      _guide_add_form_elements($form, $form_state, $node);
      // Since the "guide" dropdown can't trigger a form submission when
      // JavaScript is disabled, add a submit button to do that. guide.css hides
      // this button when JavaScript is enabled.
      $form['guide']['pick-guide'] = array(
        '#type' => 'submit',
        '#value' => t('Change guide (update list of parents)'),
        '#submit' => array('guide_pick_guide_nojs_submit'),
        '#weight' => 20,
      );
    }

  }
}

/**
 * Form submission handler for node_form().
 *
 * This handler is run when JavaScript is disabled. It triggers the form to
 * rebuild so that the "Parent item" options are changed to reflect the newly
 * selected guide. When JavaScript is enabled, the submit button that triggers
 * this handler is hidden, and the "guide" dropdown directly triggers the
 * guide_form_update() Ajax callback instead.
 *
 * @see guide_form_update()
 * @see guide_form_node_form_alter()
 */
function guide_pick_guide_nojs_submit($form, &$form_state) {
  $form_state['node']->guide = $form_state['values']['guide'];
  $form_state['rebuild'] = TRUE;
}

/**
 * Builds the parent selection form element for the node form or structure tab.
 *
 * This function is also called when generating a new set of options during the
 * Ajax callback, so an array is returned that can be used to replace an
 * existing form element.
 *
 * @param $guide_link
 *   A fully loaded menu link that is part of the guide hierarchy.
 *
 * @return
 *   A parent selection form element.
 */
function _guide_parent_select($guide_link) {
  if (variable_get('menu_override_parent_selector', FALSE)) {
    return array();
  }
  // Offer a message or a drop-down to choose a different parent page.
  $form = array(
    '#type' => 'hidden',
    '#value' => -1,
    '#prefix' => '<div id="edit-guide-plid-wrapper">',
    '#suffix' => '</div>',
  );

  if ($guide_link['nid'] === $guide_link['gid']) {
    // This is a guide - at the top level.
    if ($guide_link['original_gid'] === $guide_link['gid']) {
      $form['#prefix'] .= '<em>' . t('This is the top-level page in this guide.') . '</em>';
    }
    else {
      $form['#prefix'] .= '<em>' . t('This will be the top-level page in this guide.') . '</em>';
    }
  }
  elseif (!$guide_link['gid']) {
    $form['#prefix'] .= '<em>' . t('No guide selected.') . '</em>';
  // } elseif (GUIDE_MAX_DEPTH > 2) {
  } else {
    $form = array(
      '#type' => 'select',
      '#title' => t('Parent item'),
      '#default_value' => $guide_link['plid'],
      '#description' => t('The parent page in the guide. The maximum depth for a guide and all child pages is !maxdepth. Some pages in the selected guide may not be available as parents if selecting them would exceed this limit.', array('!maxdepth' => GUIDE_MAX_DEPTH)),
      '#options' => guide_toc($guide_link['gid'], $guide_link['parent_depth_limit'], array($guide_link['mlid'])),
      '#attributes' => array('class' => array('guide-title-select')),
      '#prefix' => '<div id="edit-guide-plid-wrapper">',
      '#suffix' => '</div>',
    );
  // } else {
  //   $form['#prefix'] .= '<em>' . t('The current settings do not allow selecting a parent at this level. The <em>Parent</em> field has been disabled.') . '</em>';
  }

  return $form;
}

/**
 * Builds the common elements of the guide form for the node and structure forms.
 *
 * @param $node
 *   The node whose form is being viewed.
 */
function _guide_add_form_elements(&$form, &$form_state, $node) {
  // If the form is being processed during the Ajax callback of our guide gid
  // dropdown, then $form_state will hold the value that was selected.
  if (isset($form_state['values']['guide'])) {
    $node->guide = $form_state['values']['guide'];
  }

  $form['guide'] = array(
    '#type' => 'fieldset',
    '#title' => t('Guide structure'),
    '#weight' => 10,
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
    '#group' => 'additional_settings',
    '#attributes' => array(
      'class' => array('guide-structure-form'),
    ),
    '#attached' => array(
      'js' => array(drupal_get_path('module', 'guide') . '/js/guide.js'),
    ),
    '#tree' => TRUE,
  );
  foreach (array('menu_name', 'mlid', 'nid', 'router_path', 'has_children', 'options', 'module', 'original_gid', 'parent_depth_limit') as $key) {
    $form['guide'][$key] = array(
      '#type' => 'value',
      '#value' => $node->guide[$key],
    );
  }

  $form['guide']['plid'] = _guide_parent_select($node->guide);

  // @see _guide_admin_table_tree(). The weight may be larger than 15.
  $form['guide']['weight'] = array(
    '#type' => 'weight',
    '#title' => t('Weight'),
    '#default_value' => $node->guide['weight'],
    '#delta' => max(15, abs($node->guide['weight'])),
    '#weight' => 5,
    '#description' => t('Pages at a given level are ordered first by weight and then by title.'),
  );
  $options = array();
  $nid = isset($node->nid) ? $node->nid : 'new';

  if (isset($node->nid) && ($nid == $node->guide['original_gid']) && ($node->guide['parent_depth_limit'] == 0)) {
    // This is the top level node in a maximum depth guide and thus cannot be moved.
    if (isset($node->field_node_display_title[LANGUAGE_NONE]) && !empty($node->field_node_display_title[LANGUAGE_NONE][0]['safe_value'])) {
      $options[$node->nid] = $node->field_node_display_title[LANGUAGE_NONE][0]['safe_value'];
    }
    else {
      $options[$node->nid] = $node->title;
    }
  }
  else {
    foreach (guide_get_guides() as $guide) {
      $options[$guide['nid']] = $guide['title'];
    }
  }

  // if (user_access('create new guides') && ($nid == 'new' || ($nid != $node->guide['original_gid']))) {
  //   // The node can become a new guide, if it is not one already.
  //   $options = array($nid => '<' . t('create a new guide') . '>') + $options;
  // }
  if (!$node->guide['mlid']) {
    // The node is not currently in the hierarchy.
    $options = array(0 => '<' . t('none') . '>') + $options;
  }

  // Add a drop-down to select the destination guide.
  $form['guide']['gid'] = array(
    '#type' => 'select',
    '#title' => t('Guide'),
    '#default_value' => $node->guide['gid'],
    '#options' => $options,
    '#access' => (bool) $options,
    '#description' => t('Your page will be a part of the selected guide.'),
    '#weight' => -5,
    '#attributes' => array('class' => array('guide-title-select')),
    '#ajax' => array(
      'callback' => 'guide_form_update',
      'wrapper' => 'edit-guide-plid-wrapper',
      'effect' => 'fade',
      'speed' => 'fast',
    ),
  );
}

/**
 * Renders a new parent page select element when the guide selection changes.
 *
 * This function is called via Ajax when the selected guide is changed on a node
 * or guide structure form.
 *
 * @return
 *   The rendered parent page select element.
 */
function guide_form_update($form, $form_state) {
  return $form['guide']['plid'];
}

/**
 * Handles additions and updates to the guide structure.
 *
 * This common helper function performs all additions and updates to the guide
 * structure through node addition, node editing, node deletion, or the structure
 * tab.
 *
 * @param $node
 *   The node that is being saved, added, deleted, or moved.
 *
 * @return
 *   TRUE if the menu link was saved; FALSE otherwise.
 */
function _guide_update_structure($node) {
  if (empty($node->guide['gid'])) {
    return FALSE;
  }
  $new = empty($node->guide['mlid']);

  $node->guide['link_path'] = 'node/' . $node->nid;
  if (isset($node->field_node_display_title[LANGUAGE_NONE]) && !empty($node->field_node_display_title[LANGUAGE_NONE][0]['safe_value'])) {
    $node->guide['link_title'] = $node->field_node_display_title[LANGUAGE_NONE][0]['safe_value'];
  }
  else {
    $node->guide['link_title'] = $node->title;
  }

  $node->guide['parent_mismatch'] = FALSE; // The normal case.

  if ($node->guide['gid'] == $node->nid) {
    $node->guide['plid'] = 0;
    $node->guide['menu_name'] = guide_menu_name($node->nid);
  }
  else {
    // Check in case the parent is not is this guide; the guide takes precedence.
    if (!empty($node->guide['plid'])) {
      $parent = db_query("SELECT * FROM {guide} WHERE mlid = :mlid", array(
        ':mlid' => $node->guide['plid'],
      ))->fetchAssoc();
    }
    if (empty($node->guide['plid']) || !$parent || $parent['gid'] != $node->guide['gid']) {
      $node->guide['plid'] = db_query("SELECT mlid FROM {guide} WHERE nid = :nid", array(
        ':nid' => $node->guide['gid'],
      ))->fetchField();
      $node->guide['parent_mismatch'] = TRUE; // Likely when JS is disabled.
    }
  }

  if (menu_link_save($node->guide)) {
    if ($new) {
      // Insert new.
      db_insert('guide')
        ->fields(array(
          'nid' => $node->nid,
          'mlid' => $node->guide['mlid'],
          'gid' => $node->guide['gid'],
        ))
        ->execute();
      // Reset the cache of stored guides.
      drupal_static_reset('guide_get_guides');
    }
    else {
      if ($node->guide['gid'] != db_query("SELECT gid FROM {guide} WHERE nid = :nid", array(
          ':nid' => $node->nid,
        ))->fetchField()) {
        // Update the gid for this page and all children.
        guide_update_gid($node->guide);
        // Reset the cache of stored guides.
        drupal_static_reset('guide_get_guides');
      }
    }

    return TRUE;
  }

  // Failed to save the menu link.
  return FALSE;
}

/**
 * Updates the guide ID of a page and its children when it moves to a new guide.
 *
 * @param $guide_link
 *   A fully loaded menu link that is part of the guide hierarchy.
 */
function guide_update_gid($guide_link) {
  $query = db_select('menu_links');
  $query->addField('menu_links', 'mlid');
  for ($i = 1; $i <= GUIDE_MAX_DEPTH && $guide_link["p$i"]; $i++) {
    $query->condition("p$i", $guide_link["p$i"]);
  }
  $mlids = $query->execute()->fetchCol();

  if ($mlids) {
    db_update('guide')
      ->fields(array('gid' => $guide_link['gid']))
      ->condition('mlid', $mlids, 'IN')
      ->execute();
  }
}

/**
 * Gets the guide menu tree for a page and returns it as a linear array.
 *
 * @param $guide_link
 *   A fully loaded menu link that is part of the guide hierarchy.
 *
 * @return
 *   A linear array of menu links in the order that the links are shown in the
 *   menu, so the previous and next pages are the elements before and after the
 *   element corresponding to the current node. The children of the current node
 *   (if any) will come immediately after it in the array, and links will only
 *   be fetched as deep as one level deeper than $guide_link.
 */
function guide_get_flat_menu($guide_link) {
  $flat = &drupal_static(__FUNCTION__, array());

  if (!isset($flat[$guide_link['mlid']])) {
    // Call menu_tree_all_data() to take advantage of the menu system's caching.
    $tree = menu_tree_all_data($guide_link['menu_name'], $guide_link, $guide_link['depth'] + 1);
    $flat[$guide_link['mlid']] = array();
    _guide_flatten_menu($tree, $flat[$guide_link['mlid']]);
  }

  return $flat[$guide_link['mlid']];
}

/**
 * Recursively converts a tree of menu links to a flat array.
 *
 * @param $tree
 *   A tree of menu links in an array.
 * @param $flat
 *   A flat array of the menu links from $tree, passed by reference.
 *
 * @see guide_get_flat_menu().
 */
function _guide_flatten_menu($tree, &$flat) {
  foreach ($tree as $data) {
    if (!$data['link']['hidden']) {
      $flat[$data['link']['mlid']] = $data['link'];
      if ($data['below']) {
        _guide_flatten_menu($data['below'], $flat);
      }
    }
  }
}

/**
 * Fetches the menu link for the previous page of the guide.
 *
 * @param $guide_link
 *   A fully loaded menu link that is part of the guide hierarchy.
 *
 * @return
 *   A fully loaded menu link for the page before the one represented in
 *   $guide_link.
 */
function guide_prev($guide_link) {
  // If the parent is zero, we are at the start of a guide.
  if ($guide_link['plid'] == 0) {
    return NULL;
  }

  $flat = guide_get_flat_menu($guide_link);
  // Assigning the array to $flat resets the array pointer for use with each().
  $curr = NULL;
  do {
    $prev = $curr;
    list($key, $curr) = each($flat);
  } while ($key && $key != $guide_link['mlid']);

  if ($prev['has_children']) {
    return NULL;
  }

  if ($key == $guide_link['mlid']) {
    // The previous page in the guide may be a child of the previous visible link.
    if ($prev['depth'] == $guide_link['depth'] && $prev['has_children']) {
      // The subtree will have only one link at the top level - get its data.
      $tree = guide_menu_subtree_data($prev);
      $data = array_shift($tree);
      // The link of interest is the last child - iterate to find the deepest one.
      while ($data['below']) {
        $data = end($data['below']);
      }

      return $data['link'];
    }
    else {
      return $prev;
    }
  }
}

/**
 * Fetches the menu link for the next page of the guide.
 *
 * @param $guide_link
 *   A fully loaded menu link that is part of the guide hierarchy.
 *
 * @return
 *   A fully loaded menu link for the page after the one represented in
 *   $guide_link.
 */
function guide_next($guide_link) {
  $flat = guide_get_flat_menu($guide_link);
  // Assigning the array to $flat resets the array pointer for use with each().
  do {
    list($key, $curr) = each($flat);
  }
  while ($key && $key != $guide_link['mlid']);

  if ($key == $guide_link['mlid']) {
    return current($flat);
  }
}

/**
 * Formats the menu links for the child pages of the current page.
 *
 * @param $guide_link
 *   A fully loaded menu link that is part of the guide hierarchy.
 *
 * @return
 *   HTML for the links to the child pages of the current page.
 */
function guide_children($guide_link) {
  $flat = guide_get_flat_menu($guide_link);

  $children = array();

  if ($guide_link['has_children']) {
    // Walk through the array until we find the current page.
    do {
      $link = array_shift($flat);
    }
    while ($link && ($link['mlid'] != $guide_link['mlid']));
    // Continue though the array and collect the links whose parent is this page.
    while (($link = array_shift($flat)) && $link['plid'] == $guide_link['mlid']) {
      $data['link'] = $link;
      $data['below'] = '';
      $children[] = $data;
    }
  }

  if ($children) {
    $elements = menu_tree_output($children);
    return drupal_render($elements);
  }
  return '';
}

/**
 * Formats the menu links for the child pages of the parent page.
 *
 * @param $guide_link
 *   A fully loaded menu link that is part of the guide hierarchy.
 *
 * @return
 *   HTML for the links to the child pages of the current page.
 */
function guide_siblings($guide_link) {


  $parent_link = menu_link_load($guide_link['plid']);

  $flat = guide_get_flat_menu($parent_link);

  $children = array();

  if ($parent_link['has_children']) {
    // Walk through the array until we find the current page.
    do {
      $link = array_shift($flat);
    }
    while ($link && ($link['mlid'] != $parent_link['mlid']));
    // Continue though the array and collect the links whose parent is this page.
    while (($link = array_shift($flat)) && $link['plid'] == $parent_link['mlid']) {
      $data['link'] = $link;
      $data['below'] = '';
      $children[] = $data;
    }
  }

  if ($children) {
    $elements = menu_tree_output($children);
    return drupal_render($elements);
  }
  return '';
}

/**
 * Generates the corresponding menu name from a guide ID.
 *
 * @param $gid
 *   The guide ID for which to make a menu name.
 *
 * @return
 *   The menu name.
 */
function guide_menu_name($gid) {
  return 'guide-toc-' . $gid;
}

/**
 * Implements hook_node_load().
 */
function guide_node_load($nodes, $types) {
  $result = db_query("SELECT * FROM {guide} b INNER JOIN {menu_links} ml ON b.mlid = ml.mlid WHERE b.nid IN (:nids)", array(':nids' =>  array_keys($nodes)), array('fetch' => PDO::FETCH_ASSOC));
  foreach ($result as $record) {
    $nodes[$record['nid']]->guide = $record;
    $nodes[$record['nid']]->guide['href'] = $record['link_path'];
    $nodes[$record['nid']]->guide['title'] = $record['link_title'];
    $nodes[$record['nid']]->guide['options'] = unserialize($record['options']);
  }
}

/**
 * Implements hook_node_view().
 */
function guide_node_view($node, $view_mode) {
  if ($view_mode == 'full') {
    if (!empty($node->guide['gid']) && empty($node->in_preview)) {
      $node->content['guide_navigation_primary'] = array(
        '#markup' => theme('guide_navigation_primary', array('guide_link' => $node->guide)),
        '#weight' => -100,
      );
      $node->content['guide_navigation_secondary'] = array(
        '#markup' => theme('guide_navigation_secondary', array('guide_link' => $node->guide)),
        '#weight' => 100,
      );
    }
  }

  if ($view_mode != 'rss') {
    guide_node_view_link($node, $view_mode);
  }
}

/**
 * Implements hook_page_alter().
 *
 * Adds the guide menu to the list of menus used to build the active trail when
 * viewing a guide page.
 */
function guide_page_alter(&$page) {
  if (($node = menu_get_object()) && !empty($node->guide['gid'])) {
    $active_menus = menu_get_active_menu_names();
    $active_menus[] = $node->guide['menu_name'];
    menu_set_active_menu_names($active_menus);
  }
}

/**
 * Implements hook_node_presave().
 */
function guide_node_presave($node) {
  // Always save a revision for non-administrators.
  if (!empty($node->guide['gid']) && !user_access('administer nodes')) {
    $node->revision = 0;
    // The database schema requires a log message for every revision.
    if (!isset($node->log)) {
      $node->log = '';
    }
  }
  // Make sure a new node gets a new menu link.
  if (empty($node->nid)) {
    $node->guide['mlid'] = NULL;
  }
}

/**
 * Implements hook_node_insert().
 */
function guide_node_insert($node) {
  if ($node->type == 'guide' && empty($node->guide['gid'])) {
    $node->guide['gid'] = $node->nid;
  }
  if (!empty($node->guide['gid'])) {
    if ($node->guide['gid'] == 'new') {
      // New nodes that are their own guide.
      $node->guide['gid'] = $node->nid;
    }
    $node->guide['nid'] = $node->nid;
    $node->guide['menu_name'] = guide_menu_name($node->guide['gid']);
    _guide_update_structure($node);
  }

}

/**
 * Implements hook_node_update().
 */
function guide_node_update($node) {
  if (!empty($node->guide['gid'])) {
    if ($node->guide['gid'] == 'new') {
      // New nodes that are their own guide.
      $node->guide['gid'] = $node->nid;
    }
    $node->guide['nid'] = $node->nid;
    $node->guide['menu_name'] = guide_menu_name($node->guide['gid']);
    _guide_update_structure($node);
  }
}

/**
 * Implements hook_node_delete().
 */
function guide_node_delete($node) {
  if (!empty($node->guide['gid'])) {
    if ($node->nid == $node->guide['gid']) {
      // Handle deletion of a top-level post.
      $result = db_query("SELECT b.nid FROM {menu_links} ml INNER JOIN {guide} b on b.mlid = ml.mlid WHERE ml.plid = :plid", array(
        ':plid' => $node->guide['mlid']
      ));
      foreach ($result as $child) {
        $child_node = node_load($child->nid);
        $child_node->guide['gid'] = $child_node->nid;
        _guide_update_structure($child_node);
      }
    }
    menu_link_delete($node->guide['mlid']);
    db_delete('guide')
      ->condition('mlid', $node->guide['mlid'])
      ->execute();
    drupal_static_reset('guide_get_guides');
  }
}

/**
 * Implements hook_node_prepare().
 */
function guide_node_prepare($node) {
  // Prepare defaults for the add/edit form.
  if (empty($node->guide) && (user_access('add content to guides') || user_access('administer guide structures'))) {
    $node->guide = array();

    if (empty($node->nid) && isset($_GET['parent']) && is_numeric($_GET['parent'])) {
      // Handle "Add child page" links:
      $parent = guide_link_load($_GET['parent']);

      if ($parent && $parent['access']) {
        $node->guide['gid'] = $parent['gid'];
        $node->guide['plid'] = $parent['mlid'];
        $node->guide['menu_name'] = $parent['menu_name'];
      }
    }
    // Set defaults.
    $node->guide += _guide_link_defaults(!empty($node->nid) ? $node->nid : 'new');
  }
  else {
    if (isset($node->guide['gid']) && !isset($node->guide['original_gid'])) {
      $node->guide['original_gid'] = $node->guide['gid'];
    }
  }
  // Find the depth limit for the parent select.
  if (isset($node->guide['gid']) && !isset($node->guide['parent_depth_limit'])) {
    $node->guide['parent_depth_limit'] = _guide_parent_depth_limit($node->guide);
  }
}

/**
 * Finds the depth limit for items in the parent select.
 *
 * @param $guide_link
 *   A fully loaded menu link that is part of the guide hierarchy.
 *
 * @return
 *   The depth limit for items in the parent select.
 */
function _guide_parent_depth_limit($guide_link) {
  return GUIDE_MAX_DEPTH - 1 - (($guide_link['mlid'] && $guide_link['has_children']) ? menu_link_children_relative_depth($guide_link) : 0);
}

/**
 * Implements hook_form_FORM_ID_alter() for node_delete_confirm().
 *
 * Alters the confirm form for a single node deletion.
 *
 * @see node_delete_confirm()
 */
function guide_form_node_delete_confirm_alter(&$form, $form_state) {
  $node = node_load($form['nid']['#value']);

  if (isset($node->guide) && $node->guide['has_children']) {
    if (!empty($node->field_node_display_title[LANGUAGE_NONE][0]['safe_value'])) {
      $title = $node->field_node_display_title[LANGUAGE_NONE][0]['safe_value'];
    } else {
      $title = $node->title;
    }
    
    $form['guide_warning'] = array(
      '#markup' => '<p>' . t('%title is part of a guide structure, and has associated child pages. If you proceed with deletion, the child pages will be relocated automatically.', array('%title' => $title)) . '</p>',
      '#weight' => -10,
    );
  }
}

/**
 * Returns an array with default values for a guide page's menu link.
 *
 * @param $nid
 *   The ID of the node whose menu link is being created.
 *
 * @return
 *   The default values for the menu link.
 */
function _guide_link_defaults($nid) {
  return array('original_gid' => 0, 'menu_name' => '', 'nid' => $nid, 'gid' => 0, 'router_path' => 'node/%', 'plid' => 0, 'mlid' => 0, 'has_children' => 0, 'weight' => 0, 'module' => 'guide', 'options' => array());
}

/**
 * Processes variables for guide-all-guides-block.tpl.php.
 *
 * All non-renderable elements are removed so that the template has full access
 * to the structured data but can also simply iterate over all elements and
 * render them (as in the default template).
 *
 * @param $variables
 *   An associative array containing the following key:
 *   - guide_menus
 *
 * @see guide-all-guides-block.tpl.php
 */
function template_preprocess_guide_all_guides_block(&$variables) {
  // Remove all non-renderable elements.
  $elements = $variables['guide_menus'];
  $variables['guide_menus'] = array();
  foreach (element_children($elements) as $index) {
    $variables['guide_menus'][$index] = $elements[$index];
  }
}

/**
 * Processes variables for guide-navigation-primary.tpl.php.
 *
 * @param $variables
 *   An associative array containing the following key:
 *   - guide_link
 *
 * @see guide-navigation.tpl.php
 */
function template_preprocess_guide_navigation_primary(&$variables) {
  $guide_link = $variables['guide_link'];

  // Provide extra variables for themers. Not needed by default.
  $variables['guide_id'] = $guide_link['gid'];
  $variables['guide_title'] = check_plain($guide_link['link_title']);
  $variables['guide_url'] = 'node/' . $guide_link['gid'];
  $variables['current_depth'] = $guide_link['depth'];
  $variables['tree'] = '';

  if ($guide_link['has_children'] == 1) {
    $variables['tree'] = guide_children($guide_link);
  } else {
    $variables['tree'] = guide_siblings($guide_link);
  }
  if ($guide_link['mlid']) {
    if ($guide_link['plid'] && $parent = guide_link_load($guide_link['plid'])) {
      $parent_href = url($parent['href']);
      drupal_add_html_head_link(array('rel' => 'up', 'href' => $parent_href));
      $variables['parent_url'] = $parent_href;
      $variables['parent_title'] = check_plain($parent['title']);
    }
  }
  $variables['has_links'] = FALSE;
  // Link variables to filter for values and set state of the flag variable.
  $links = array('prev_url', 'prev_title', 'parent_url', 'parent_title', 'next_url', 'next_title');
  foreach ($links as $link) {
    if (isset($variables[$link])) {
      // Flag when there is a value.
      $variables['has_links'] = TRUE;
    }
    else {
      // Set empty to prevent notices.
      $variables[$link] = '';
    }
  }
}


/**
 * Processes variables for guide-navigation-secondary.tpl.php.
 *
 * @param $variables
 *   An associative array containing the following key:
 *   - guide_link
 *
 * @see guide-navigation.tpl.php
 */
function template_preprocess_guide_navigation_secondary(&$variables) {
  $guide_link = $variables['guide_link'];

  // Provide extra variables for themers. Not needed by default.
  $variables['guide_id'] = $guide_link['gid'];
  $variables['guide_title'] = check_plain($guide_link['link_title']);
  $variables['guide_url'] = 'node/' . $guide_link['gid'];
  $variables['current_depth'] = $guide_link['depth'];
  $variables['tree'] = '';

  if ($guide_link['mlid']) {

    if ($prev = guide_prev($guide_link)) {
      $prev_href = url($prev['href']);
      drupal_add_html_head_link(array('rel' => 'prev', 'href' => $prev_href));
      $variables['prev_url'] = $prev_href;
      $variables['prev_title'] = check_plain($prev['title']);
    }

    // if ($guide_link['plid'] && $parent = guide_link_load($guide_link['plid'])) {
    //   $parent_href = url($parent['href']);
    //   drupal_add_html_head_link(array('rel' => 'up', 'href' => $parent_href));
    //   $variables['parent_url'] = $parent_href;
    //   $variables['parent_title'] = check_plain($parent['title']);
    // }

    if ($next = guide_next($guide_link)) {
      $next_href = url($next['href']);
      drupal_add_html_head_link(array('rel' => 'next', 'href' => $next_href));
      $variables['next_url'] = $next_href;
      $variables['next_title'] = check_plain($next['title']);
    }
  }

  $variables['has_links'] = FALSE;
  // Link variables to filter for values and set state of the flag variable.
  $links = array('prev_url', 'prev_title', 'parent_url', 'parent_title', 'next_url', 'next_title');
  foreach ($links as $link) {
    if (isset($variables[$link])) {
      // Flag when there is a value.
      $variables['has_links'] = TRUE;
    }
    else {
      // Set empty to prevent notices.
      $variables[$link] = '';
    }
  }
}

/**
 * Recursively processes and formats menu items for guide_toc().
 *
 * This helper function recursively modifies the table of contents array for
 * each item in the menu tree, ignoring items in the exclude array or at a depth
 * greater than the limit. Truncates titles over thirty characters and appends
 * an indentation string incremented by depth.
 *
 * @param $tree
 *   The data structure of the guide's menu tree. Includes hidden links.
 * @param $indent
 *   A string appended to each menu item title. Increments by '--' per depth
 *   level.
 * @param $toc
 *   Reference to the table of contents array. This is modified in place, so the
 *   function does not have a return value.
 * @param $exclude
 *   (optional) An array of menu link ID values. Any link whose menu link ID is
 *   in this array will be excluded (along with its children). Defaults to an
 *   empty array.
 * @param $depth_limit
 *   Any link deeper than this value will be excluded (along with its children).
 */
function _guide_toc_recurse($tree, $indent, &$toc, $exclude, $depth_limit) {
  foreach ($tree as $data) {
    if ($data['link']['depth'] > $depth_limit) {
      // Don't iterate through any links on this level.
      break;
    }

    if (!in_array($data['link']['mlid'], $exclude)) {
      $toc[$data['link']['mlid']] = $indent . ' ' . truncate_utf8($data['link']['title'], 30, TRUE, TRUE);
      if ($data['below']) {
        _guide_toc_recurse($data['below'], $indent . '--', $toc, $exclude, $depth_limit);
      }
    }
  }
}

/**
 * Returns an array of guide pages in table of contents order.
 *
 * @param $gid
 *   The ID of the guide whose pages are to be listed.
 * @param $depth_limit
 *   Any link deeper than this value will be excluded (along with its children).
 * @param $exclude
 *   Optional array of menu link ID values. Any link whose menu link ID is in
 *   this array will be excluded (along with its children).
 *
 * @return
 *   An array of (menu link ID, title) pairs for use as options for selecting a
 *   guide page.
 */
function guide_toc($gid, $depth_limit, $exclude = array()) {
  $tree = menu_tree_all_data(guide_menu_name($gid));
  $toc = array();
  _guide_toc_recurse($tree, '', $toc, $exclude, $depth_limit);

  return $toc;
}

/**
 * Processes variables for guide-export-html.tpl.php.
 *
 * @param $variables
 *   An associative array containing the following keys:
 *   - title
 *   - contents
 *   - depth
 *
 * @see guide-export-html.tpl.php
 */
function template_preprocess_guide_export_html(&$variables) {
  global $base_url, $language;

  $variables['title'] = check_plain($variables['title']);
  $variables['base_url'] = $base_url;
  $variables['language'] = $language;
  $variables['language_rtl'] = ($language->direction == LANGUAGE_RTL);
  $variables['head'] = drupal_get_html_head();
  $variables['dir'] = $language->direction ? 'rtl' : 'ltr';
}

/**
 * Traverses the guide tree to build printable or exportable output.
 *
 * During the traversal, the $visit_func() callback is applied to each node and
 * is called recursively for each child of the node (in weight, title order).
 *
 * @param $tree
 *   A subtree of the guide menu hierarchy, rooted at the current page.
 * @param $visit_func
 *   A function callback to be called upon visiting a node in the tree.
 *
 * @return
 *   The output generated in visiting each node.
 */
function guide_export_traverse($tree, $visit_func) {
  $output = '';

  foreach ($tree as $data) {
    // Note- access checking is already performed when building the tree.
    if ($node = node_load($data['link']['nid'], FALSE)) {
      $children = '';

      if ($data['below']) {
        $children = guide_export_traverse($data['below'], $visit_func);
      }

      if (function_exists($visit_func)) {
        $output .= call_user_func($visit_func, $node, $children);
      }
      else {
        // Use the default function.
        $output .= guide_node_export($node, $children);
      }
    }
  }

  return $output;
}

/**
 * Generates printer-friendly HTML for a node.
 *
 * @param $node
 *   The node that will be output.
 * @param $children
 *   (optional) All the rendered child nodes within the current node. Defaults
 *   to an empty string.
 *
 * @return
 *   The HTML generated for the given node.
 *
 * @see guide_export_traverse()
 */
function guide_node_export($node, $children = '') {
  $build = node_view($node, 'print');
  unset($build['#theme']);
  // @todo Rendering should happen in the template using render().
  $node->rendered = drupal_render($build);

  return theme('guide_node_export_html', array('node' => $node, 'children' => $children));
}

/**
 * Processes variables for guide-node-export-html.tpl.php.
 *
 * @param $variables
 *   An associative array containing the following keys:
 *   - node
 *   - children
 *
 * @see guide-node-export-html.tpl.php
 */
function template_preprocess_guide_node_export_html(&$variables) {
  $variables['depth'] = $variables['node']->guide['depth'];
  if (isset($variables['node']->field_node_display_title[LANGUAGE_NONE]) && !empty($variables['node']->field_node_display_title[LANGUAGE_NONE][0]['safe_value'])) {
    $variables['title'] = check_plain($variables['node']->field_node_display_title[LANGUAGE_NONE][0]['safe_value']);
  }
  else {
    $variables['title'] = check_plain($variables['node']->title);
  }
  $variables['content'] = $variables['node']->rendered;
}

/**
 * Determine if a given node type is in the list of types allowed for guides.
 *
 * @param $type
 *   A node type.
 *
 * @return
 *   A Boolean TRUE if the node type can be included in guides; otherwise, FALSE.
 */
function guide_type_is_allowed($type) {
  return in_array($type, variable_get('guide_allowed_types', array('guide')));
}

/**
 * Implements hook_node_type_update().
 *
 * Updates the guide module's persistent variables if the machine-readable name
 * of a node type is changed.
 */
function guide_node_type_update($type) {
  if (!empty($type->old_type) && $type->old_type != $type->type) {
    // Update the list of node types that are allowed to be added to guides.
    $allowed_types = variable_get('guide_allowed_types', array('guide'));
    $key = array_search($type->old_type, $allowed_types);

    if ($key !== FALSE) {
      $allowed_types[$type->type] = $allowed_types[$key] ? $type->type : 0;
      unset($allowed_types[$key]);
      variable_set('guide_allowed_types', $allowed_types);
    }

    // Update the setting for the "Add child page" link.
    if (variable_get('guide_child_type', 'guide') == $type->old_type) {
      variable_set('guide_child_type', $type->type);
    }
  }
}

/**
 * Gets a guide menu link by its menu link ID.
 *
 * Like menu_link_load(), but adds additional data from the {guide} table.
 *
 * Do not call when loading a node, since this function may call node_load().
 *
 * @param $mlid
 *   The menu link ID of the menu item.
 *
 * @return
 *   A menu link, with the link translated for rendering and data added from the
 *   {guide} table. FALSE if there is an error.
 */
function guide_link_load($mlid) {
  if ($item = db_query("SELECT * FROM {menu_links} ml INNER JOIN {guide} b ON b.mlid = ml.mlid LEFT JOIN {menu_router} m ON m.path = ml.router_path WHERE ml.mlid = :mlid", array(
      ':mlid' => $mlid,
    ))->fetchAssoc()) {
    _menu_link_translate($item);
    return $item;
  }

  return FALSE;
}

/**
 * Gets the data representing a subtree of the guide hierarchy.
 *
 * The root of the subtree will be the link passed as a parameter, so the
 * returned tree will contain this item and all its descendents in the menu
 * tree.
 *
 * @param $link
 *   A fully loaded menu link.
 *
 * @return
 *   A subtree of menu links in an array, in the order they should be rendered.
 */
function guide_menu_subtree_data($link) {
  $tree = &drupal_static(__FUNCTION__, array());

  // Generate a cache ID (cid) specific for this $menu_name and $link.
  $cid = 'links:' . $link['menu_name'] . ':subtree-cid:' . $link['mlid'];

  if (!isset($tree[$cid])) {
    $cache = cache_get($cid, 'cache_menu');

    if ($cache && isset($cache->data)) {
      // If the cache entry exists, it will just be the cid for the actual data.
      // This avoids duplication of large amounts of data.
      $cache = cache_get($cache->data, 'cache_menu');

      if ($cache && isset($cache->data)) {
        $data = $cache->data;
      }
    }

    // If the subtree data was not in the cache, $data will be NULL.
    if (!isset($data)) {
      $query = db_select('menu_links', 'ml', array('fetch' => PDO::FETCH_ASSOC));
      $query->join('menu_router', 'm', 'm.path = ml.router_path');
      $query->join('guide', 'b', 'ml.mlid = b.mlid');
      $query->fields('b');
      $query->fields('m', array('load_functions', 'to_arg_functions', 'access_callback', 'access_arguments', 'page_callback', 'page_arguments', 'delivery_callback', 'title', 'title_callback', 'title_arguments', 'type'));
      $query->fields('ml');
      $query->condition('menu_name', $link['menu_name']);
      for ($i = 1; $i <= GUIDE_MAX_DEPTH && $link["p$i"]; ++$i) {
        $query->condition("p$i", $link["p$i"]);
      }
      for ($i = 1; $i <= GUIDE_MAX_DEPTH; ++$i) {
        $query->orderBy("p$i");
      }
      $links = array();
      foreach ($query->execute() as $item) {
        $links[] = $item;
      }
      $data['tree'] = menu_tree_data($links, array(), $link['depth']);
      $data['node_links'] = array();
      menu_tree_collect_node_links($data['tree'], $data['node_links']);
      // Compute the real cid for guide subtree data.
      $tree_cid = 'links:' . $item['menu_name'] . ':subtree-data:' . hash('sha256', serialize($data));
      // Cache the data, if it is not already in the cache.

      if (!cache_get($tree_cid, 'cache_menu')) {
        cache_set($tree_cid, $data, 'cache_menu');
      }
      // Cache the cid of the (shared) data using the menu and item-specific cid.
      cache_set($cid, $tree_cid, 'cache_menu');
    }
    // Check access for the current user to each item in the tree.
    menu_tree_check_access($data['tree'], $data['node_links']);
    $tree[$cid] = $data['tree'];
  }

  return $tree[$cid];
}

/**
 * Implements hook_views_api().
 *
 * This one is used as the base to reduce errors when updating.
 */
function guide_views_api($module, $api) {
  // if ($module == 'views' && $api == 'views_default') {
    return array(
      'version' => 2,
      'path' => drupal_get_path('module', 'guide') . '/views',
    );
  // }
}





function guide_form_alter(&$form, &$form_state, $form_id) {
  if ($form_id == 'guide_section_node_form') {
    $form['#validate'][] = 'guide_guide_section_form_validate';
  }
}

function guide_guide_section_form_validate($form, &$form_state) {
  if ($form_state['values']['guide']['gid'] == 0 || $form_state['values']['guide']['gid'] == 'new') {
    form_set_error('guide', t('You must select an existing guide to add this section to.'));
  }
}

//
//
// /**
//  * Implements hook_token_info() on behalf of guide.module.
//  */
// function guide_token_info() {
//   $info['tokens']['node']['guide'] = array(
//     'name' => t('Guide'),
//     'description' => t('The guide page associated with the node.'),
//     'type' => 'menu-link',
//   );
//   return $info;
// }
//
// /**
//  * Implements hook_tokens() on behalf of guide.module.
//  */
// function guide_tokens($type, $tokens, array $data = array(), array $options = array()) {
//   $replacements = array();
//   $sanitize = !empty($options['sanitize']);
//
//   // Node tokens.
//   if ($type == 'node' && !empty($data['node'])) {
//     $node = $data['node'];
//
//     if (!empty($node->guide['mlid'])) {
//       $link = guide_guide_link_load($node->guide['mlid']);
//
//       foreach ($tokens as $name => $original) {
//         switch ($name) {
//           case 'guide':
//             $replacements[$original] = $sanitize ? check_plain($link['title']) : $link['title'];
//             break;
//         }
//       }
//
//       // Chained token relationships.
//       if ($guide_tokens = token_find_with_prefix($tokens, 'guide')) {
//         $replacements += token_generate('menu-link', $guide_tokens, array('menu-link' => $link), $options);
//       }
//     }
//   }
//
//   return $replacements;
// }
//
//
// /**
//  * Get a translated guide menu link by its mlid, without access checking.
//  *
//  * This function is a copy of guide_link_load() but with its own cache and a
//  * simpler query to load the link. This also skips normal menu link access
//  * checking by using _token_menu_link_translate().
//  *
//  * @param $mlid
//  *   The mlid of the guide menu item.
//  *
//  * @return
//  *   A guide menu link translated for rendering.
//  *
//  * @see guide_link_load()
//  * @see _token_menu_link_translate()
//  */
// function guide_guide_link_load($mlid) {
//   $cache = &drupal_static(__FUNCTION__, array());
//
//   if (!is_numeric($mlid)) {
//     return FALSE;
//   }
//
//   if (!isset($cache[$mlid])) {
//     $item = db_query("SELECT * FROM {menu_links} ml INNER JOIN {guide} b ON b.mlid = ml.mlid LEFT JOIN {menu_router} m ON m.path = ml.router_path WHERE ml.mlid = :mlid", array(':mlid' => $mlid))->fetchAssoc();
//     if (!empty($item)) {
//       _token_menu_link_translate($item);
//     }
//     $cache[$mlid] = $item;
//   }
//
//   return $cache[$mlid];
// }




/**
 * Handles additions and updates to the guide outline.
 *
 * This common helper function performs all additions and updates to the guide
 * outline through node addition, node editing, node deletion, or the outline
 * tab.
 *
 * @param $node
 *   The node that is being saved, added, deleted, or moved.
 *
 * @return
 *   TRUE if the menu link was saved; FALSE otherwise.
 */
function _guide_update_outline($node) {
  if (empty($node->guide['bid'])) {
    return FALSE;
  }
  $new = empty($node->guide['mlid']);

  $node->guide['link_path'] = 'node/' . $node->nid;
  if (isset($node->field_node_display_title[LANGUAGE_NONE]) && !empty($node->field_node_display_title[LANGUAGE_NONE][0]['safe_value'])) {
    $node->guide['link_title'] = $node->field_node_display_title[LANGUAGE_NONE][0]['safe_value'];
  }
  else {
    $node->guide['link_title'] = $node->title;
  }
  $node->guide['parent_mismatch'] = FALSE; // The normal case.

  if ($node->guide['bid'] == $node->nid) {
    $node->guide['plid'] = 0;
    $node->guide['menu_name'] = guide_menu_name($node->nid);
  }
  else {
    // Check in case the parent is not is this guide; the guide takes precedence.
    if (!empty($node->guide['plid'])) {
      $parent = db_query("SELECT * FROM {guide} WHERE mlid = :mlid", array(
        ':mlid' => $node->guide['plid'],
      ))->fetchAssoc();
    }
    if (empty($node->guide['plid']) || !$parent || $parent['bid'] != $node->guide['bid']) {
      $node->guide['plid'] = db_query("SELECT mlid FROM {guide} WHERE nid = :nid", array(
        ':nid' => $node->guide['bid'],
      ))->fetchField();
      $node->guide['parent_mismatch'] = TRUE; // Likely when JS is disabled.
    }
  }

  if (menu_link_save($node->guide)) {
    if ($new) {
      // Insert new.
      db_insert('guide')
        ->fields(array(
          'nid' => $node->nid,
          'mlid' => $node->guide['mlid'],
          'bid' => $node->guide['bid'],
        ))
        ->execute();
      // Reset the cache of stored guides.
      drupal_static_reset('guide_get_guides');
    }
    else {
      if ($node->guide['bid'] != db_query("SELECT bid FROM {guide} WHERE nid = :nid", array(
          ':nid' => $node->nid,
        ))->fetchField()) {
        // Update the bid for this page and all children.
        guide_update_bid($node->guide);
        // Reset the cache of stored guides.
        drupal_static_reset('guide_get_guides');
      }
    }

    return TRUE;
  }

  // Failed to save the menu link.
  return FALSE;
}

/*
* Site-specific mixins here.
*/

// Full width block elements - bg colour.
@mixin fullwidth-bg($bg-colour){
  background: $bg-colour;
}

// Extra side padding.
@mixin paddingLR($padding){
  padding-left: $padding;
  padding-right: $padding;
}

// Gridder plugin.
@mixin rowMachine($numPerRow, $margin) {
  width: ((100% - (($numPerRow - 1) * $margin)) / $numPerRow);

  &:nth-child(n) {
    margin-bottom: $margin;
    margin-right: $margin;
  }

  &:nth-of-type(#{$numPerRow}n) {
    margin-right: 0;
    margin-bottom: 0;
  }
}

// Form feedback status.
@mixin showFormStatus($labelColour, $inputBorderColour, $statusColour, $statusColourOpacity, $closeIconColour) {
  label {
    color: $labelColour;
  }

  input {
    border-color: $inputBorderColour;
    margin-bottom: $commonSpacing - 15;
  }

  .help-block {
    position: relative;
    padding: $commonSpacing/3 $commonSpacing/2 ;
    background: lighten($statusColour, $statusColourOpacity);
    color: $labelColour;
    border: 0;

    button.close {
      opacity: 1;
      text-shadow: none;
      position: relative;
      top: -8px;
      right: -5px;
    }

    span[class^="icon-"] {
      color: $closeIconColour;
      font-size: $font-size-01;

      &:hover {
        cursor: pointer;
      }
    }
  }
}

// Alert statuses.
@mixin alertStatus($alertColour, $alertOpacity){
  div.alert {
    &[class^="alert-*"] {
      background: lighten($alertColour, $alertOpacity);
    }
  }
}


// Grid Rows.
@mixin gridRows($numPerRow, $margin) {
  width: ((100% - (($numPerRow - 1) * $margin)) / $numPerRow);

  &:nth-child(n) {
    margin-bottom: $margin;
    margin-right: $margin;
  }

  &:nth-of-type(#{$numPerRow}n) {
    margin-right: 0;
    margin-bottom: 0;
  }
}

@mixin gridWidth($numPerRow, $margin) {
  width: ((100% - (($numPerRow - 1) * $margin)) / $numPerRow);
  margin-bottom: $margin;
  margin-right: $margin;
}

@mixin gridWidthSingleCenter($numPerRow, $margin) {
  width: ((100% - (($numPerRow - 1) * $margin)) / $numPerRow);
  margin-left: ((100% - ((100% - (($numPerRow - 1) * $margin)) / $numPerRow)) / 2);
  margin-bottom: $margin;
}

@function quote-workaround($input) {
  @return '"' + $input + '"';
}

@mixin constrained {
  position: relative;
  margin: 0 auto;
  float: none;
  min-height: auto;
  @media (min-width: $screen-lg-min) {
    width: $container-lg;
  }
  @media (min-width: $screen-md-min) and (max-width: $screen-md-max) {
    width: $container-md;
  }
  @media (min-width: $screen-xs-min) and (max-width: $screen-sm-max) {
    width: $container-sm;
  }
}
